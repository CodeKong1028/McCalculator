
(function() {
    const encoded = '';
    
    // 正确处理UTF-8编码的Base64解码
    function decodeUTF8(str) {
        try {
            // 先进行Base64解码，然后处理UTF-8字符
            const decoded = atob(str);
            // 将每个字符转换为UTF-8字符
            return decodeURIComponent(escape(decoded));
        } catch (error) {
            console.error('解码失败:', error);
            return null;
        }
    }
    
    const decoded = decodeUTF8(encoded);
    if (decoded) {
        eval(decoded);
    }
})();
// Protected by FF14Calculator Simple Build System